What happens when you initialize a repository? Why do you need to do it?

	A .git folder is created in the directory where the repository is located. We need it to keep a track and history of our codebase.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	Staging area is an area, possibly a logical section of the working directory that we aim to commit. 
	Although it is still an uncommited version. Hence, not on the repository yet.
	It is helpful to separate parts of the codebase which are possibly exclusive of the rest of the codebase and ready to be committed.

How can you use the staging area to make sure you have one commit per logical
change?
	
	By using git diff and git diff --staged commands and comparing the files in staging area with those in the working directory
	and comparing the files in the staging area with those in the repository.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
	
	When trying experimental features.

How do the diagrams help you visualize the branch structure?

	It helps in knowing the reachability, letting us know where the head is and allowing us to decide which branches does our commits affect.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	Merging two branches together will merge all the codebase of both the branches together making all logical changes that were made on both
	the branches under the same branch. Representing it in the diagram makes it much easier to follow the commits and path.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

	Pros - GIT will help merging branches and codebase that do not interfere/conflict with each other without needing user input.
	Cons - Nothing really, as if there it will not automatically merge even if there is the slightest of conflicts.